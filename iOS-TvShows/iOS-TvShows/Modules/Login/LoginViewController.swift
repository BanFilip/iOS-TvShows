//
//  LoginViewController.swift
//  iOS-TvShows
//
//  Created by Filip Ban on 08.11.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa
import IQKeyboardManagerSwift
import SVProgressHUD

final class LoginViewController: KeyboardViewController {

    // MARK: - Public properties -

    var scrollView: UIScrollView!
    var contentView: UIView!
    var stackView: UIStackView!
    var imageView: UIImageView!
    var loginLabel: UILabel!
    var helperLabel: UILabel!
    var emailInputView: CustomInputView!
    var passwordInputView: CustomInputView!
    var rememberButton: UIButton!
    var loginButton: SecondaryButton!
    var registerButton: PrimaryButton!

    var presenter: LoginPresenterInterface!

    // MARK: - Private properties -

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        buildViews()
        setupView()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        IQKeyboardManager.shared.toolbarPreviousNextAllowedClasses = [UIStackView.self]
    }
}

// MARK: - Extensions -

extension LoginViewController: LoginViewInterface {
    func showSpinner() {
        SVProgressHUD.show()
    }

    func hideSpinner() {
        SVProgressHUD.dismiss()
    }
}

private extension LoginViewController {

    func setupView() {
        let shouldRemember = rememberButton.rx.tap.asDriver()
            .scan(false) { previousValue, _ in !previousValue }
            .startWith(false)

        let output = Login.ViewOutput(
            email: emailInputView.textField.rx.text.asDriver(),
            password: passwordInputView.textField.rx.text.asDriver(),
            shouldRemember: shouldRemember,
            login: loginButton.rx.tap.asSignal(),
            register: registerButton.rx.tap.asSignal()
        )

        let input = presenter.configure(with: output)
        handle(shouldRemember)
        handle(areButtonsEnabled: input.areButtonsEnabled)
        handle(isEmailValid: input.isEmailValid)
        handle(isPasswordValid: input.isPasswordValid)
    }
}

private extension LoginViewController {
    func handle(_ shouldRemember: Driver<Bool>) {
        shouldRemember
            .drive(rememberButton.rx.isSelected)
            .disposed(by: disposeBag)
    }

    func handle(areButtonsEnabled: Driver<Bool>) {
        areButtonsEnabled
            .drive(registerButton.rx.isEnabled)
            .disposed(by: disposeBag)

        areButtonsEnabled
            .drive(loginButton.rx.isEnabled)
            .disposed(by: disposeBag)
    }

    func handle(isEmailValid: Driver<Bool?>) {
        isEmailValid
            .compactMap { $0 }
            .drive(emailInputView.rx.isValid)
            .disposed(by: disposeBag)
    }

    func handle(isPasswordValid: Driver<Bool?>) {
        isPasswordValid
            .compactMap { $0 }
            .drive(passwordInputView.rx.isValid)
            .disposed(by: disposeBag)
    }
}
