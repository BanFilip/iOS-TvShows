//
//  ShowDetailsPresenter.swift
//  iOS-TvShows
//
//  Created by Filip Ban on 24.11.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class ShowDetailsPresenter {

    // MARK: - Private properties -

    private unowned let view: ShowDetailsViewInterface
    private let interactor: ShowDetailsInteractorInterface
    private let wireframe: ShowDetailsWireframeInterface
    private let disposeBag: DisposeBag

    // MARK: - Lifecycle -

    init(
        view: ShowDetailsViewInterface,
        interactor: ShowDetailsInteractorInterface,
        wireframe: ShowDetailsWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.disposeBag = DisposeBag()
    }
}

// MARK: - Extensions -

extension ShowDetailsPresenter: ShowDetailsPresenterInterface {

    func configure(with output: ShowDetails.ViewOutput) -> ShowDetails.ViewInput {
        onCreateReviewTapped(output.createReview)
        let reviews = fetchReviews()
        let items = reviews
            .map { [unowned self] in createItems(from: $0) }

        return ShowDetails.ViewInput(
            show: fetchShow(),
            reviews: items.map { $0 as [TableCellItem] }
        )
    }

    private func onCreateReviewTapped(_ createReview: Signal<Void>) {
        createReview
            .emit(onNext: { [unowned self] _ in
                print("Go To Create Review")
            })
            .disposed(by: disposeBag)
    }

    private func fetchShow() -> Driver<Show> {
        return interactor
            .fetchShow()
            .handleLoadingAndError(with: view)
            .asDriver(onErrorDriveWith: .never())
    }

    private func fetchReviews() -> Driver<[Review]> {
        return interactor
            .fetchReviews()
            .handleLoading(with: view)
            .asDriver(onErrorJustReturn: [])
    }

    private func createItems(from reviews: [Review]) -> [ReviewTableCellItem] {
        return reviews.map {
            return ReviewTableCellItem(review: $0)
        }
    }

}
