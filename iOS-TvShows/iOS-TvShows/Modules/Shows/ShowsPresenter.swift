//
//  ShowsPresenter.swift
//  iOS-TvShows
//
//  Created by Filip Ban on 23.11.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class ShowsPresenter {

    // MARK: - Private properties -

    private unowned let view: ShowsViewInterface
    private let interactor: ShowsInteractorInterface
    private let wireframe: ShowsWireframeInterface
    private let disposeBag: DisposeBag

    // MARK: - Lifecycle -

    init(
        view: ShowsViewInterface,
        interactor: ShowsInteractorInterface,
        wireframe: ShowsWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.disposeBag = DisposeBag()
    }
}

// MARK: - Extensions -

extension ShowsPresenter: ShowsPresenterInterface {

    func configure(with output: Shows.ViewOutput) -> Shows.ViewInput {
        handle(settings: output.settings)
        let paginatedShows = showsPaging(
            loadNextPage: output.willDisplayLastCell,
            reload: output.pullToRefresh
        )
        let items = paginatedShows
            .map { [unowned self] in createItems(from: $0)}

        return Shows.ViewInput(
            shows: items.map { $0 as [TableCellItem] }
        )
    }

    func handle(settings: Signal<Void>) {
        settings
            .emit(onNext: { [unowned self] in
                wireframe.goToSettings()
            })
            .disposed(by: disposeBag)
    }

    func createItems(from shows: [Show]) -> [ShowTableCellItem] {
        return shows.map {
            return ShowTableCellItem(
                show: $0,
                didSelect: { [unowned self] in wireframe.goToShowDetails(with: $0.show) }
            )
        }
    }
}

extension ShowsPresenter {
    typealias Container = [Show]
    typealias Page = ShowsResponse
    typealias PagingEvent = Paging.Event<Container>

    func showsPaging(loadNextPage: Driver<Void>, reload: Driver<Void>) -> Driver<[Show]> {
        let events = Driver
            .merge(
                loadNextPage.mapTo(PagingEvent.nextPage),
                reload.startWith(()).mapTo(PagingEvent.reload)
            )

        func nextPage(container: Container, lastPage: Page?) -> Single<Page> {
            return interactor
                .shows(with: lastPage?.pagination)
        }

        func accumulator(_ container: Container, _ page: Page) -> Container {
            return container + page.shows
        }

        func hasNext(container: Container, lastPage: Page) -> Bool {
            return lastPage.pagination.page < lastPage.pagination.pages
        }

        let response = Paging
            .page(
                make: nextPage,
                startingWith: [],
                joining: accumulator,
                while: hasNext,
                on: events.asObservable()
            )

        return response
            .map { $0.container }
            .asDriver(onErrorJustReturn: [])
    }
}
