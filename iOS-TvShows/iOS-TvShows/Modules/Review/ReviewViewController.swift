//
//  ReviewViewController.swift
//  iOS-TvShows
//
//  Created by Filip Ban on 30.11.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class ReviewViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: ReviewPresenterInterface!

    // MARK: - Private properties -

    private let scrollView = UIScrollView()
    private let contentView = UIView()
    private let ratingLabel = UILabel(with: UIFont.systemFont(ofSize: 17))
    private let starsView = StarsView()
    private let commentTitleLabel = UILabel(with: UIFont.systemFont(ofSize: 17))
    private let commentTextView = UITextView()
    private let placeholderLabel = UILabel(with: UIFont.systemFont(ofSize: 17))
    private let submitButton = PrimaryButton()

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupView()
    }

}

// MARK: - Extensions -

extension ReviewViewController: ReviewViewInterface {
}

private extension ReviewViewController {

    func setupView() {
        guard let leftBarButton = navigationItem.leftBarButtonItem else { return }
        KeyboardHandler
            .register(scrollView: scrollView)
            .disposed(by: disposeBag)

        let output = SendReview.ViewOutput(
            close: leftBarButton.rx.tap.asSignal(),
            rating: starsView.tapBehaviorRelay.asDriver(),
            comment: commentTextView.rx.text.asDriver(),
            submit: submitButton.rx.tap.asSignal()
        )

        let input = presenter.configure(with: output)
        handle(isSubmitEnabled: input.isSubmitEnabled)
    }

}

private extension ReviewViewController {
    func handle(isSubmitEnabled: Driver<Bool>) {
        isSubmitEnabled
            .drive(submitButton.rx.isEnabled)
            .disposed(by: disposeBag)
    }
}

extension ReviewViewController: UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        placeholderLabel.isHidden = !textView.text.isEmpty
    }
}

private extension ReviewViewController {

    func setupUI() {
        addSubviews()
        configureView()
        configureSubviews()
        defineConstraints()
    }

    func addSubviews() {
        view.addSubview(scrollView)
        scrollView.addSubview(contentView)
        contentView.addSubview(ratingLabel)
        contentView.addSubview(starsView)
        contentView.addSubview(commentTitleLabel)
        contentView.addSubview(commentTextView)
        commentTextView.addSubview(placeholderLabel)
        contentView.addSubview(submitButton)
    }

    func configureView() {
        title = "Write a review"
        view.backgroundColor = UIColor.TVShows.appWhite
        view.addGestureRecognizer(UITapGestureRecognizer(
                                    target: view,
                                    action: #selector(UIView.endEditing(_:))))

        navigationController?.styleNavBar(prefersLargeTitles: false)
        navigationItem.leftBarButtonItem = UIBarButtonItem(
            title: "Close",
            style: .plain,
            target: nil,
            action: nil
        )
    }

    func configureSubviews() {
        scrollView.showsVerticalScrollIndicator = false

        ratingLabel.textColor = UIColor.TVShows.appDarkGrey
        ratingLabel.textAlignment = .left
        ratingLabel.text = "Rating"

        starsView.isUserInteractionEnabled = true

        commentTitleLabel.textColor = UIColor.TVShows.appDarkGrey
        commentTitleLabel.textAlignment = .left
        commentTitleLabel.text = "Comment"

        commentTextView.backgroundColor = UIColor.TVShows.appGrey
        commentTextView.font = UIFont.systemFont(ofSize: 17)
        commentTextView.textColor = .black
        commentTextView.textContainerInset = UIEdgeInsets(top: 12, left: 14, bottom: 12, right: 14)
        commentTextView.roundAllCorners(withRadius: 10)
        commentTextView.delegate = self

        placeholderLabel.textColor = .black.withAlphaComponent(0.5)
        placeholderLabel.text = "Enter your comment here..."
        placeholderLabel.textAlignment = .left

        submitButton.setTitle("Submit", for: .normal)
    }

    func defineConstraints() {
        scrollView.snp.makeConstraints {
            $0.edges.equalToSuperview()
        }

        contentView.snp.makeConstraints {
            $0.width.equalTo(view)
            $0.edges.equalToSuperview()
        }

        ratingLabel.snp.makeConstraints {
            $0.top.equalToSuperview().inset(30)
            $0.leading.trailing.equalToSuperview().inset(20)
        }

        starsView.snp.makeConstraints {
            $0.top.equalTo(ratingLabel.snp.bottom).offset(16)
            $0.leading.equalToSuperview().inset(20)
        }

        commentTitleLabel.snp.makeConstraints {
            $0.top.equalTo(starsView.snp.bottom).offset(30)
            $0.leading.trailing.equalToSuperview().inset(20)
        }

        commentTextView.snp.makeConstraints {
            $0.top.equalTo(commentTitleLabel.snp.bottom).offset(16)
            $0.leading.trailing.equalToSuperview().inset(20)
            $0.height.equalTo(196)
        }

        placeholderLabel.snp.makeConstraints {
            $0.top.equalToSuperview().inset(12)
            $0.leading.trailing.equalToSuperview().inset(16)
        }

        submitButton.snp.makeConstraints {
            $0.top.equalTo(commentTextView.snp.bottom).offset(30)
            $0.leading.trailing.bottom.equalToSuperview().inset(20)
        }
    }
}
