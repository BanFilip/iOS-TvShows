//
//  ReviewPresenter.swift
//  iOS-TvShows
//
//  Created by Filip Ban on 30.11.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class ReviewPresenter {

    // MARK: - Private properties -

    private unowned let view: ReviewViewInterface
    private let interactor: ReviewInteractorInterface
    private let wireframe: ReviewWireframeInterface
    private let disposeBag: DisposeBag

    // MARK: - Lifecycle -

    init(
        view: ReviewViewInterface,
        interactor: ReviewInteractorInterface,
        wireframe: ReviewWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        disposeBag = DisposeBag()
    }
}

// MARK: - Extensions -

extension ReviewPresenter: ReviewPresenterInterface {

    func configure(with output: SendReview.ViewOutput) -> SendReview.ViewInput {
        onCloseTapped(close: output.close)
        onSubmitTapped(
            submit: output.submit,
            rating: output.rating,
            comment: output.comment
        )

        return SendReview.ViewInput(
            isSubmitEnabled: isSubmitEnabled(rating: output.rating)
        )
    }
}

private extension ReviewPresenter {

    func onCloseTapped(close: Signal<Void>) {
        close
            .emit(onNext: { [unowned self] _ in
                wireframe.dismiss()
            })
            .disposed(by: disposeBag)
    }

    func onSubmitTapped(
        submit: Signal<Void>,
        rating: Driver<Int?>,
        comment: Driver<String?>
    ) {
        let inputs = Driver.combineLatest(
            rating.compactMap { $0 },
            comment
        )
        submit
            .withLatestFrom(inputs)
            .flatMapLatest { [unowned self] rating, comment -> Driver<Void> in
                performSubmit(rating: rating, comment: comment)
            }
            .drive(onNext: { [unowned self] _ in
                wireframe.dismiss()
            })
            .disposed(by: disposeBag)
    }

    private func performSubmit(rating: Int, comment: String?) -> Driver<Void> {
        interactor
            .submitReview(with: rating, comment: comment)
            .handleLoadingAndError(with: view)
            .asDriver(onErrorDriveWith: .never())
    }
}

private extension ReviewPresenter {

    func isSubmitEnabled(rating: Driver<Int?>) -> Driver<Bool> {
        rating
            .map { $0 != nil }
    }
}
