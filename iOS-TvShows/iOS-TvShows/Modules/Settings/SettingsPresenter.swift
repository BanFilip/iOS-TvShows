//
//  SettingsPresenter.swift
//  iOS-TvShows
//
//  Created by Filip Ban on 23.11.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class SettingsPresenter: NSObject {

    // MARK: - Private properties -

    private unowned let view: SettingsViewInterface
    private let interactor: SettingsInteractorInterface
    private let wireframe: SettingsWireframeInterface
    private let disposeBag: DisposeBag

    // MARK: - Lifecycle -

    init(
        view: SettingsViewInterface,
        interactor: SettingsInteractorInterface,
        wireframe: SettingsWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.disposeBag = DisposeBag()
    }
}

// MARK: - Extensions -

extension SettingsPresenter: SettingsPresenterInterface {

    func configure(with output: Settings.ViewOutput) -> Settings.ViewInput {
        onCloseTapped(close: output.close)
        onChangePhotoTapped(changePhoto: output.changePhoto)
        onLogoutTapped(logout: output.logout)
        return Settings.ViewInput(
            user: user
        )
    }

    func onCloseTapped(close: Signal<Void>) {
        close
            .emit(onNext: { [unowned self] _ in
                wireframe.dismiss()
            })
            .disposed(by: disposeBag)
    }

    func onChangePhotoTapped(changePhoto: Signal<Void>) {
        changePhoto
            .emit(onNext: { [unowned self] _ in
                wireframe.openGallery(delegate: self)
            })
            .disposed(by: disposeBag)
    }

    func onLogoutTapped(logout: Signal<Void>) {
        logout
            .emit(onNext: { [unowned self] _ in
                interactor.deleteAuthInfo()
                wireframe.goToLogin()
            })
            .disposed(by: disposeBag)
    }

    var user: Driver<User> {
        interactor
            .user
            .handleLoadingAndError(with: view)
            .asDriver(onErrorDriveWith: .never())
    }
}

extension SettingsPresenter: UIImagePickerControllerDelegate {

    func imagePickerController(
        _ picker: UIImagePickerController,
        didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]
    ) {
        if
            let image = info[UIImagePickerController.InfoKey(
                rawValue: "UIImagePickerControllerEditedImage"
            )] as? UIImage {
        }
        picker.dismiss(animated: true, completion: nil)
    }

    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true, completion: nil)
    }
}
